{"version":3,"sources":["webpack:///./tasks/../src/common/storage.js"],"names":["Storage","url","name","obj","get","data","resove","chrome","storage","sync","set","console","log","runtime","lastError","result","decoErrFn","target","descriptor","fn","value","apply","arguments","catch","error","e","location","origin"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,O;AACF,qBAAYC,GAAZ,EAAiB;AAAA;;AACb,aAAKA,GAAL,GAAWA,GAAX;AACH;;;;;iHAESC,I,EAAMC,G;;;;;;;;;uCACK,KAAKC,GAAL,E;;;AAAbC,oC;;AACJ,oCAAI,CAACA,IAAL,EAAW;AACPA,2CAAO,EAAP;AACH;iEACM,sBAAY,UAACC,MAAD,EAAY;AAC3BC,2CAAOC,OAAP,CAAeC,IAAf,CAAoBC,GAApB,mCACK,MAAKT,GADV,EACgB,sBAAcI,IAAd,oCACPH,IADO,EACAC,GADA,EADhB,GAIG,YAAM;AACLQ,gDAAQC,GAAR,CAAYL,OAAOM,OAAP,CAAeC,SAA3B,EAAsC,cAAtC;AACAR;AACH,qCAPD;AAQH,iCATM,C;;;;;;;;;;;;;;;;;;4BAYPJ,I,EAAM;AAAA;;AACN,mBAAO,sBAAY,UAACI,MAAD,EAAY;AAC3BC,uBAAOC,OAAP,CAAeC,IAAf,CAAoBL,GAApB,CACI,CAAC,OAAKH,GAAN,CADJ,EAEE,gBAAQ;AACNU,4BAAQC,GAAR,CAAYP,IAAZ,EAAkB,KAAlB;AACA,wBAAIU,SAAS,EAAb;AACA,wBAAIV,KAAK,OAAKJ,GAAV,CAAJ,EAAoB;AAChBc,iCAASV,KAAK,OAAKJ,GAAV,CAAT;AACH;AACDK,2BAAOJ,OAAOa,OAAOb,IAAP,CAAP,GAAsBa,OAAO,OAAKd,GAAZ,CAA7B;AACH,iBATD;AAUH,aAXM,CAAP;AAYH;;;0DA/BAe,S,4IAiBAA,S;;;AAiBL,SAASA,SAAT,CAAmBC,MAAnB,EAA2Bf,IAA3B,EAAiCgB,UAAjC,EAA6C;AACzC,QAAIC,KAAKD,WAAWE,KAApB;AACAF,eAAWE,KAAX,GAAmB,YAAW;AAC1B,eAAOD,GAAGE,KAAH,CAAS,IAAT,EAAeC,SAAf,EAA0BC,KAA1B,CAAgC,aAAK;AACxCZ,oBAAQa,KAAR,CAAc,0BAA0BC,CAAxC;AACH,SAFM,CAAP;AAGH,KAJD;AAKH;;kBAEc,IAAIzB,OAAJ,CAAY0B,SAASC,MAArB,C","file":"count.c51917a31c2f79674a19.hot-update.js","sourcesContent":["\n\nclass Storage {\n    constructor(url) {\n        this.url = url;\n    }\n    @decoErrFn\n    async set(name, obj) {\n        let data = await this.get();\n        if (!data) {\n            data = {};\n        }\n        return new Promise((resove) => {\n            chrome.storage.sync.set({\n                [this.url]: Object.assign(data, {\n                    [name]: obj\n                })\n            }, () => {\n                console.log(chrome.runtime.lastError, 'lastErr222or');\n                resove();\n            })\n        })\n    }\n    @decoErrFn\n    get(name) {\n        return new Promise((resove) => {\n            chrome.storage.sync.get(\n                [this.url]\n            , data => {\n                console.log(data, 'get')\n                let result = {};\n                if (data[this.url]) {\n                    result = data[this.url];\n                }\n                resove(name ? result[name] : result[this.url]);\n            })\n        })\n    }\n}\n\nfunction decoErrFn(target, name, descriptor) {\n    let fn = descriptor.value;\n    descriptor.value = function() {\n        return fn.apply(this, arguments).catch(e => {\n            console.error('chrome storage error:' + e);\n        })\n    }\n}\n\nexport default new Storage(location.origin);"],"sourceRoot":""}